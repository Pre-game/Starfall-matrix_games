[gd_resource type="VisualShader" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeFresnel" id=5]
default_input_values = [ 2, false, 3, 7.0 ]

[sub_resource type="VisualShaderNodeBooleanConstant" id=6]
constant = true

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.122595, 0.292767, 0.605781, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0.410147, 0.911245, 0.936406, 1 )

[sub_resource type="VisualShaderNodeScalarInterp" id=12]

[sub_resource type="VisualShaderNodeFresnel" id=1]
output_port_for_preview = 0
default_input_values = [ 2, false, 3, 5.0 ]

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeBooleanConstant" id=4]
constant = true

[sub_resource type="VisualShaderNodeColorOp" id=8]
operator = 8

[sub_resource type="VisualShaderNodeColorConstant" id=9]
constant = Color( 0.172451, 0.244627, 0.832344, 1 )

[resource]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:9
	vec3 n_out9p0 = vec3(0.172451, 0.244627, 0.832344);
	float n_out9p1 = 1.000000;

// Input:4
	vec3 n_out4p0 = COLOR.rgb;

// Boolean:6
	bool n_out6p0 = true;

// Fresnel:2
	float n_in2p3 = 5.00000;
	float n_out2p0 = n_out6p0 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3));

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * vec3(n_out2p0);

// ColorOp:8
	vec3 n_out8p0;
	{
		float base = n_out9p0.x;
		float blend = n_out5p0.x;
		if (base < 0.5) {
			n_out8p0.x = (base * (2.0 * blend));
		} else {
			n_out8p0.x = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = n_out9p0.y;
		float blend = n_out5p0.y;
		if (base < 0.5) {
			n_out8p0.y = (base * (2.0 * blend));
		} else {
			n_out8p0.y = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = n_out9p0.z;
		float blend = n_out5p0.z;
		if (base < 0.5) {
			n_out8p0.z = (base * (2.0 * blend));
		} else {
			n_out8p0.z = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}

// Boolean:11
	bool n_out11p0 = true;

// Fresnel:10
	float n_in10p3 = 7.00000;
	float n_out10p0 = n_out11p0 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in10p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in10p3));

// ScalarMix:17
	float n_in17p2 = 0.50000;
	float n_out17p0 = mix(dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)), n_out10p0, n_in17p2);

// Color:16
	vec3 n_out16p0 = vec3(0.410147, 0.911245, 0.936406);
	float n_out16p1 = 1.000000;

// Color:14
	vec3 n_out14p0 = vec3(0.122595, 0.292767, 0.605781);
	float n_out14p1 = 1.000000;

// VectorOp:15
	vec3 n_out15p0 = n_out16p0 * n_out14p0;

// Output:0
	ALPHA = n_out17p0;
	EMISSION = n_out15p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -369.451, -281.443 )
modes/blend = 1
nodes/vertex/0/position = Vector2( 480, 60 )
nodes/fragment/0/position = Vector2( 660, -220 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -380, -200 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -160, -340 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 20, -220 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -500, -220 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( 280, -300 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 100, -300 )
nodes/fragment/10/node = SubResource( 5 )
nodes/fragment/10/position = Vector2( 120, -80 )
nodes/fragment/11/node = SubResource( 6 )
nodes/fragment/11/position = Vector2( -140, -80 )
nodes/fragment/14/node = SubResource( 7 )
nodes/fragment/14/position = Vector2( -100, 160 )
nodes/fragment/15/node = SubResource( 10 )
nodes/fragment/15/position = Vector2( 300, 120 )
nodes/fragment/16/node = SubResource( 11 )
nodes/fragment/16/position = Vector2( -80, 20 )
nodes/fragment/17/node = SubResource( 12 )
nodes/fragment/17/position = Vector2( 420, -260 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 2, 0, 5, 1, 6, 0, 2, 2, 5, 0, 8, 1, 9, 0, 8, 0, 11, 0, 10, 2, 14, 0, 15, 1, 16, 0, 15, 0, 8, 0, 17, 0, 10, 0, 17, 1, 15, 0, 0, 5, 17, 0, 0, 1 )
